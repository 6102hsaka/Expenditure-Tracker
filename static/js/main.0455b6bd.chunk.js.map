{"version":3,"sources":["components/HeaderComponent.js","components/HomeComponent.js","components/AddComponent.js","shared/data.js","components/ViewComponent.js","App.js","serviceWorker.js","index.js"],"names":["mystyle","header","padding","marginBottom","navBrand","fontSize","MyNavBar","props","state","isOpen","isModalOpen","username","password","toogleNavBar","bind","toogleModal","this","setState","e","target","name","value","alert","console","log","JSON","stringify","preventDefault","Navbar","style","dark","expand","NavbarBrand","NavbarToggler","onClick","Collapse","navbar","Nav","className","NavItem","to","Button","outline","color","icon","faUserAlt","Modal","toggle","ModalHeader","ModalBody","Form","onSubmit","submitForm","FormGroup","Label","htmlFor","type","id","onChange","handleForm","Component","Header","Home","useState","setModalOpen","firstname","setFirstname","lastname","setLastname","email","setEmail","setPassword","toggleModal","event","Input","src","alt","width","AddView","animationIn","animationInDuration","isVisible","Col","md","Card","CardBody","CardTitle","data","amount","used","date","GraphicalView","dataMap","Map","i","length","undefined","get","set","graphData","labels","keys","datasets","label","map","key","backgroundColor","borderColor","ShowView","d","App","path","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.0455b6bd.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport {\r\n    Collapse, Navbar, NavbarToggler, NavbarBrand,\r\n    Nav, NavItem, Button, Modal, ModalHeader, ModalBody, Form, FormGroup, Label\r\n  } from 'reactstrap';\r\nimport { NavLink } from 'react-router-dom';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faUserAlt } from '@fortawesome/free-solid-svg-icons';\r\n\r\nconst mystyle = {\r\n    header : {\r\n        padding: '16px 28px',\r\n        marginBottom : '40px',\r\n    },\r\n    navBrand : {\r\n        fontSize : '1.5rem'\r\n    }\r\n    \r\n}\r\n  \r\nclass MyNavBar extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            isOpen: false,\r\n            isModalOpen: false,\r\n            username: '',\r\n            password: ''\r\n        }\r\n\r\n        this.toogleNavBar = this.toogleNavBar.bind(this);\r\n        this.toogleModal = this.toogleModal.bind(this);\r\n\r\n    }\r\n\r\n    toogleNavBar() {\r\n        this.setState({\r\n            ...this.state,\r\n            isOpen : !this.state.isOpen\r\n        })\r\n    }\r\n\r\n    toogleModal() {\r\n        this.setState({\r\n            ...this.state,\r\n            isModalOpen: !this.state.isModalOpen\r\n        })\r\n    }\r\n\r\n    handleForm(e) {\r\n        this.setState({\r\n            [e.target.name] : e.target.value\r\n        })\r\n    }\r\n\r\n    submitForm(e) {\r\n        alert(`username:${this.state.username} \\npassword:${this.state.password}`)\r\n        this.toogleModal();\r\n        this.setState({\r\n            username: '',\r\n            password: ''\r\n        },()=>console.log(JSON.stringify(this.state)))\r\n        \r\n        e.preventDefault();\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <Navbar style={mystyle.header} dark expand='md'>\r\n                <NavbarBrand style={mystyle.navBrand}>Expenditure Tracker</NavbarBrand>\r\n                <NavbarToggler onClick={this.toogleNavBar} />\r\n\r\n                <Collapse isOpen={this.state.isOpen} navbar>\r\n                    <Nav className='mr-auto' navbar>\r\n                        <NavItem>\r\n                            <NavLink to='/home' className='nav-link'>\r\n                                Home\r\n                            </NavLink>\r\n                        </NavItem>\r\n                        <NavItem>\r\n                            <NavLink to='/add' className='nav-link'>Add Data</NavLink>\r\n                        </NavItem>\r\n                        <NavItem>\r\n                            <NavLink to='/view' className='nav-link'>View Expense</NavLink>\r\n                        </NavItem>\r\n                    </Nav>\r\n                    <Nav>\r\n                        <NavItem className='ml-auto'>\r\n                            <Button outline className='my-btn' color='primary' onClick={this.toogleModal}>\r\n                                <FontAwesomeIcon icon={ faUserAlt } /> &nbsp; Login\r\n                            </Button>\r\n                        </NavItem>\r\n                    </Nav>\r\n                </Collapse>\r\n\r\n                <Modal isOpen={this.state.isModalOpen} toggle={this.toogleModal}>\r\n                    <ModalHeader toggle={this.toogleModal}> \r\n                        Enter Valid Credential for Login \r\n                    </ModalHeader>\r\n                    <ModalBody>\r\n                        <Form onSubmit={(e) => this.submitForm(e)}>\r\n                            <FormGroup>\r\n                                <Label htmlFor='username'>Enter Username: </Label>\r\n                                <input type='text' className='form-control' id='username'\r\n                                    name='username' value={this.state.username} onChange={(e)=>this.handleForm(e)} />\r\n                            </FormGroup>\r\n                            <FormGroup>\r\n                                <Label>Enter password: </Label>\r\n                                <input type='password' className='form-control' id='password'\r\n                                    name='password' value={this.state.password} onChange={(e)=>this.handleForm(e)} />\r\n                            </FormGroup>\r\n                            <Button type='submit' value='submit' className='my-btn' color='primary'>Login</Button>\r\n                        </Form>\r\n                    </ModalBody>\r\n                </Modal>\r\n            </Navbar>\r\n        );\r\n    }\r\n}\r\n\r\nconst Header = () =>  <MyNavBar />\r\n\r\nexport default Header;\r\n\r\n","import React, { useState } from 'react';\r\nimport { Button, Modal, ModalHeader, ModalBody, Form, FormGroup, Label, Input } from 'reactstrap';\r\n\r\n\r\nconst Home = () => {\r\n    const [isModalOpen, setModalOpen ] = useState(false)\r\n    const[firstname,setFirstname] = useState('')\r\n    const[lastname,setLastname] = useState('')\r\n    const [email,setEmail] = useState('')\r\n    const[password,setPassword] = useState('')\r\n\r\n    const toggleModal = () => setModalOpen(!isModalOpen)\r\n    const handleSubmit = (event) => {\r\n        toggleModal();\r\n        alert(`firstname:${firstname} lastname:${lastname} email:${email} password:${password}`)\r\n        event.preventDefault();\r\n    }\r\n\r\n    return (\r\n        <div className='container'>\r\n            <h1>Welcome to Our Site</h1>\r\n            <h3>We are here to help you in tracking your expenses.</h3>\r\n            <div className='row'>\r\n                <div className='col-12 col-md-6 pt-5 pl-4'>\r\n                    <br />\r\n                    Our Site offers following list of features\r\n                    <ul>\r\n                        <li>Add Expenditure Details</li>\r\n                        <li>Browse Expenditure Details</li>\r\n                        <li>Provides a graphical representation of Expenditure</li>\r\n                    </ul> \r\n                    <br /><br /><br />\r\n                    <Modal isOpen={isModalOpen} toggle={toggleModal}>\r\n                        <ModalHeader toggle={toggleModal}> \r\n                            Enter Valid Credential for Registration \r\n                        </ModalHeader>\r\n                        <ModalBody>\r\n                            <Form onSubmit={handleSubmit}>\r\n                                <FormGroup>\r\n                                    <Label>First Name: </Label>\r\n                                    <Input type='text' id='firstname' name='firstname' value={firstname} \r\n                                        onChange={event=>setFirstname(event.target.value)} \r\n                                    />\r\n                                </FormGroup>\r\n                                <FormGroup>\r\n                                    <Label>Last Name:</Label>\r\n                                    <Input type='text' id='lastname' name='lastname' value={lastname}\r\n                                        onChange={event => setLastname(event.target.value)}\r\n                                     />\r\n                                </FormGroup>\r\n                                <FormGroup>\r\n                                    <Label>Email</Label>\r\n                                    <Input type='email' id='email' name='email' value={email} \r\n                                        onChange={ event => setEmail(event.target.value)}\r\n                                    />\r\n                                </FormGroup>\r\n                                <FormGroup>\r\n                                    <Label>Password</Label>\r\n                                    <Input type='password' id='password' name='password' value={password}\r\n                                        onChange={ event => setPassword(event.target.value)} \r\n                                    />\r\n                                </FormGroup>\r\n                                <Button type='submit' className='my-btn' color='primary'>Register</Button>\r\n                            </Form>\r\n                        </ModalBody>\r\n                    </Modal>\r\n                    <Button className='btn-block my-btn' color='primary' onClick={toggleModal}>Register</Button>\r\n                    <br /><br />\r\n                </div>\r\n                <div className='col-12 col-md-6'>\r\n                    <img src='/asserts/images/img1.jpg' alt='budget' width='100%'/>\r\n                </div>\r\n            </div>\r\n            \r\n          \r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Home;","import React from 'react';\r\nimport { Col, Card, CardTitle, CardBody,\r\n    Form, FormGroup, Label, Input, Button } from 'reactstrap';\r\nimport {Animated} from 'react-animated-css';\r\n\r\nconst AddView = () => {\r\n    return (\r\n        <Animated animationIn=\"zoomIn\" animationInDuration={1200} isVisible={true}>\r\n            <div className='container'>\r\n                <Col md={8} className='mx-auto'>\r\n                    <Card className='shadow'>\r\n                        <CardBody>\r\n                            <CardTitle><h2>Enter Data</h2></CardTitle>\r\n                            <hr />\r\n                            <Form>\r\n                                <FormGroup>\r\n                                    <Label>Amount Spent</Label>\r\n                                    <Input type='text' id='amount' name='amount' />\r\n                                </FormGroup>\r\n                                <FormGroup>\r\n                                    <Label>Used for</Label>\r\n                                    <Input type='text' id='detail' name='detail' />\r\n                                </FormGroup>\r\n                                <FormGroup>\r\n                                    <Button className='my-btn' color='primary'>Save</Button>\r\n                                </FormGroup>\r\n                            </Form>\r\n                        </CardBody>\r\n                    </Card>\r\n                </Col>\r\n            </div>\r\n        </Animated>\r\n    )\r\n}\r\n\r\nexport default AddView;","export const data = [\r\n    {\r\n        id: 0,\r\n        amount: 1250,\r\n        used: 'electricity bill',\r\n        date: '1/1/2020'\r\n    },\r\n    {\r\n        id: 1,\r\n        amount: 2000,\r\n        used: 'rent',\r\n        date: '2/1/2020'\r\n    },\r\n    {\r\n        id: 2,\r\n        amount: 5000,\r\n        used: 'ration',\r\n        date: '3/1/2020'\r\n    },\r\n    {\r\n        id: 3,\r\n        amount: 598,\r\n        used: 'mobile recharge',\r\n        date: '4/1/2020'\r\n    },\r\n    {\r\n        id: 4,\r\n        amount: 50,\r\n        used: 'new light bulb',\r\n        date: '4/1/2020'\r\n    },\r\n    {\r\n        id: 5,\r\n        amount: 250,\r\n        used: 'movie',\r\n        date: '5/1/2020'\r\n    },\r\n]","import React from 'react';\r\nimport {data} from '../shared/data';\r\nimport {Bar} from 'react-chartjs-2';\r\n\r\nconst ShowView = () => {\r\n    return (\r\n        <div className='container'>\r\n            <div className='row'>\r\n            <GraphicalView />\r\n                <div className='col-md-5 offset-md-1'>\r\n                    <h3>Expense History</h3>\r\n                    <ul>\r\n                        { \r\n                            data.map(d => (\r\n                                <li key={d.id}>\r\n                                    <p>Amount Spent: {d.amount} <br/>\r\n                                    Spent for: {d.used} <br/>\r\n                                    Spent on: {d.date}</p>\r\n                                    <hr />\r\n                                </li>\r\n                            ))\r\n                        }\r\n                    </ul>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )}\r\n\r\nconst GraphicalView = () => {\r\n  let dataMap = new Map();\r\n  for(let i=0;i<data.length;i++) {\r\n      if(dataMap.get(data[i].date)===undefined) {\r\n          dataMap.set(data[i].date, data[i].amount)\r\n      } else {\r\n          dataMap.set(data[i].date, (data[i].amount + dataMap.get(data[i].date)))\r\n      }\r\n  }\r\n\r\n  const graphData = {\r\n      labels: [...dataMap.keys()],\r\n      datasets: [\r\n         {\r\n            label: 'Expense History',\r\n            data: [...dataMap.keys()].map(key => dataMap.get(key)),\r\n            backgroundColor: '#ff0000',\r\n            borderColor: '#ff0000'\r\n         }\r\n      ]\r\n  }\r\n\r\n  return (\r\n      <div className='col-md-6'>\r\n        <Bar data={graphData} />\r\n        <p className='text-center'>Plot of Daily Expenses vs Date</p>\r\n      </div>\r\n  )\r\n}\r\n\r\n\r\nexport default ShowView;","import React from 'react';\nimport './App.css';\nimport Header from './components/HeaderComponent';\nimport Home from './components/HomeComponent';\nimport AddView from './components/AddComponent';\nimport ShowView from './components/ViewComponent';\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route\n} from \"react-router-dom\";\n\nconst App = () => {\n  return (\n    <Router>\n      <div className=\"App\">\n        <Header />\n        <Switch>\n          <Route path='/home'><Home /></Route>\n          <Route path='/add'><AddView /></Route>\n          <Route path='/view'><ShowView /></Route>\n        </Switch>\n      </div>\n    </Router>\n    \n  );\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.css';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}